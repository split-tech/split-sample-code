/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  mutation AddReferral($input: ReferralInput!) {\n    addReferral(input: $input) {\n      id\n      productId\n      userReferrals {\n        id\n        referralId\n        userAddress\n        user {\n          id\n          address\n          role\n          status\n          twitterUserName\n          createdAt\n          updatedAt\n        }\n        userReferralType\n        claimed\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.AddReferralDocument,
    "\n  mutation CreateProduct($input: ProductCreateInput!) {\n    createProduct(input: $input) {\n      id\n      userAddress\n      name\n      domain\n      webLink\n      twitterLink\n      description\n      network\n      sdkInitialized\n      status\n      order\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateProductDocument,
    "\n  mutation CreateReferralCode($input: CreateReferralCodeInput!) {\n    createReferralCode(input: $input) {\n      id\n      twitterUserName\n      referralCode\n    }\n  }\n": types.CreateReferralCodeDocument,
    "\n  mutation DeleteEvent($id: String!) {\n    deleteEvent(id: $id) {\n      id\n      name\n      description\n      productId\n      type\n      totalEventNum\n      maxRefereeLimitForReferrer\n      startTimeStamp\n      endTimeStamp\n      validationType\n      createdAt\n      updatedAt\n    }\n  }\n": types.DeleteEventDocument,
    "\n  mutation RefreshApiKey($input: ProductUpdateInput!) {\n    refreshApiKey(input: $input) {\n      id\n      productAuth {\n        productId\n        apiKey\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.RefreshApiKeyDocument,
    "\n  mutation RefreshTokens($input: TokenInput!) {\n    refreshTokens(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n": types.RefreshTokensDocument,
    "\n  mutation RequestLogin($input: UserInput!) {\n    requestLogin(input: $input) {\n      id\n      address\n      role\n      status\n      nonce\n      createdAt\n      updatedAt\n    }\n  }\n": types.RequestLoginDocument,
    "\n  mutation SetIncentivePool($input: ProductUpdateInput!) {\n    setIncentivePool(input: $input) {\n      id\n      incentivePool {\n        productId\n        poolAddress\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.SetIncentivePoolDocument,
    "\n  mutation SetProductStatus($input: ProductUpdateInput!) {\n    setProductStatus(input: $input) {\n      id\n      name\n      domain\n      webLink\n      twitterLink\n      description\n      network\n      sdkInitialized\n      status\n      order\n      createdAt\n      updatedAt\n      incentivePool {\n        productId\n        poolAddress\n        createdAt\n        updatedAt\n      }\n      events {\n        id\n        name\n        description\n        productId\n        type\n        totalEventNum\n        maxRefereeLimitForReferrer\n        startTimeStamp\n        endTimeStamp\n        validationType\n        incentiveToken {\n          id\n          address\n          name\n          symbol\n          decimal\n          referrerAmountPerEvent\n          refereeAmountPerEvent\n          eventId\n          createdAt\n          updatedAt\n        }\n        eventLogValidation {\n          eventId\n          contractAddress\n          eventAbi\n          topics\n          refereeArgs\n          createdAt\n          updatedAt\n        }\n        createdAt\n        updatedAt\n      }\n      referrals {\n        id\n        userReferrals {\n          id\n          userAddress\n          user {\n            id\n            address\n            role\n            status\n            twitterUserName\n            createdAt\n            updatedAt\n          }\n          referralId\n          userReferralType\n          claimed\n          createdAt\n          updatedAt\n        }\n        productId\n        updated\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.SetProductStatusDocument,
    "\n  mutation UpsertEvent($input: EventInput!) {\n    upsertEvent(input: $input) {\n      id\n      name\n      description\n      productId\n      type\n      totalEventNum\n      maxRefereeLimitForReferrer\n      startTimeStamp\n      endTimeStamp\n      validationType\n      incentiveToken {\n        id\n        address\n        name\n        symbol\n        decimal\n        referrerAmountPerEvent\n        refereeAmountPerEvent\n        eventId\n        createdAt\n        updatedAt\n      }\n      eventLogValidation {\n        eventId\n        contractAddress\n        eventAbi\n        topics\n        refereeArgs\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpsertEventDocument,
    "\n  mutation VerifyLogin($input: VerifyUserInput!) {\n    verifyLogin(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n": types.VerifyLoginDocument,
    "\n  query FindAllReferrals {\n    findAllReferrals {\n      id\n      userReferrals {\n        id\n        userAddress\n        user {\n          id\n          address\n          role\n          status\n          twitterUserName\n          createdAt\n          updatedAt\n        }\n        referralId\n        userReferralType\n        claimed\n        createdAt\n        updatedAt\n      }\n      productId\n      updated\n      referralVerifiedEvents {\n        referralId\n        verifiedEventId\n        verifiedEvent {\n          id\n          name\n          description\n          productId\n          type\n          totalEventNum\n          maxRefereeLimitForReferrer\n          startTimeStamp\n          endTimeStamp\n          validationType\n          incentiveToken {\n            id\n            address\n            name\n            symbol\n            decimal\n            referrerAmountPerEvent\n            refereeAmountPerEvent\n            eventId\n            createdAt\n            updatedAt\n          }\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.FindAllReferralsDocument,
    "\n  query FindEventById($eventId: String!) {\n    findEventById(eventId: $eventId) {\n      id\n      name\n      description\n      productId\n      type\n      totalEventNum\n      maxRefereeLimitForReferrer\n      startTimeStamp\n      endTimeStamp\n      validationType\n      incentiveToken {\n        id\n        address\n        name\n        symbol\n        decimal\n        referrerAmountPerEvent\n        refereeAmountPerEvent\n        eventId\n        createdAt\n        updatedAt\n      }\n      eventLogValidation {\n        eventId\n        contractAddress\n        eventAbi\n        topics\n        refereeArgs\n        createdAt\n        updatedAt\n      }\n      referralVerifiedEvents {\n        referral {\n          id\n          userReferrals {\n            id\n            userAddress\n            user {\n              id\n              address\n              role\n              status\n              twitterUserName\n              createdAt\n              updatedAt\n            }\n            referralId\n            userReferralType\n            claimed\n            createdAt\n            updatedAt\n          }\n          productId\n          updated\n          createdAt\n          updatedAt\n        }\n        referralId\n        verifiedEventId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.FindEventByIdDocument,
    "\n  query FindProductByDomain($domain: String!) {\n    findProductByDomain(domain: $domain) {\n      id\n      userAddress\n      name\n      domain\n      webLink\n      twitterLink\n      description\n      network\n      sdkInitialized\n      status\n      order\n      createdAt\n      updatedAt\n      incentivePool {\n        productId\n        poolAddress\n        createdAt\n        updatedAt\n      }\n      events {\n        id\n        name\n        description\n        productId\n        type\n        totalEventNum\n        maxRefereeLimitForReferrer\n        startTimeStamp\n        endTimeStamp\n        validationType\n        incentiveToken {\n          id\n          address\n          name\n          symbol\n          decimal\n          referrerAmountPerEvent\n          refereeAmountPerEvent\n          eventId\n          createdAt\n          updatedAt\n        }\n        eventLogValidation {\n          eventId\n          contractAddress\n          eventAbi\n          topics\n          refereeArgs\n          createdAt\n          updatedAt\n        }\n        referralVerifiedEvents {\n          referral {\n            id\n            userReferrals {\n              id\n              userAddress\n              user {\n                id\n                address\n                role\n                status\n                twitterUserName\n                createdAt\n                updatedAt\n              }\n              referralId\n              userReferralType\n              claimed\n              createdAt\n              updatedAt\n            }\n            productId\n            updated\n            createdAt\n            updatedAt\n          }\n          referralId\n          verifiedEventId\n        }\n        createdAt\n        updatedAt\n      }\n      referrals {\n        id\n        userReferrals {\n          id\n          userAddress\n          user {\n            id\n            address\n            role\n            status\n            twitterUserName\n            createdAt\n            updatedAt\n          }\n          referralId\n          userReferralType\n          claimed\n          createdAt\n          updatedAt\n        }\n        productId\n        updated\n        referralVerifiedEvents {\n          referralId\n          verifiedEventId\n          verifiedEvent {\n            id\n            name\n            description\n            productId\n            type\n            totalEventNum\n            maxRefereeLimitForReferrer\n            startTimeStamp\n            endTimeStamp\n            validationType\n            incentiveToken {\n              id\n              address\n              name\n              symbol\n              decimal\n              referrerAmountPerEvent\n              refereeAmountPerEvent\n              eventId\n              createdAt\n              updatedAt\n            }\n          }\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.FindProductByDomainDocument,
    "\n  query FindProductById($id: String!) {\n    findProductById(id: $id) {\n      id\n      userAddress\n      name\n      domain\n      webLink\n      twitterLink\n      description\n      network\n      sdkInitialized\n      status\n      order\n      createdAt\n      updatedAt\n      incentivePool {\n        productId\n        poolAddress\n        createdAt\n        updatedAt\n      }\n      events {\n        id\n        name\n        description\n        productId\n        type\n        totalEventNum\n        maxRefereeLimitForReferrer\n        startTimeStamp\n        endTimeStamp\n        validationType\n        incentiveToken {\n          id\n          address\n          name\n          symbol\n          decimal\n          referrerAmountPerEvent\n          refereeAmountPerEvent\n          eventId\n          createdAt\n          updatedAt\n        }\n        eventLogValidation {\n          eventId\n          contractAddress\n          eventAbi\n          topics\n          refereeArgs\n          createdAt\n          updatedAt\n        }\n        referralVerifiedEvents {\n          referral {\n            id\n            userReferrals {\n              id\n              userAddress\n              user {\n                id\n                address\n                role\n                status\n                twitterUserName\n                createdAt\n                updatedAt\n              }\n              referralId\n              userReferralType\n              claimed\n              createdAt\n              updatedAt\n            }\n            productId\n            updated\n            createdAt\n            updatedAt\n          }\n          referralId\n          verifiedEventId\n        }\n        createdAt\n        updatedAt\n      }\n      referrals {\n        id\n        userReferrals {\n          id\n          userAddress\n          user {\n            id\n            address\n            role\n            status\n            twitterUserName\n            createdAt\n            updatedAt\n          }\n          referralId\n          userReferralType\n          claimed\n          createdAt\n          updatedAt\n        }\n        productId\n        updated\n        referralVerifiedEvents {\n          referralId\n          verifiedEventId\n          verifiedEvent {\n            id\n            name\n            description\n            productId\n            type\n            totalEventNum\n            maxRefereeLimitForReferrer\n            startTimeStamp\n            endTimeStamp\n            validationType\n            incentiveToken {\n              id\n              address\n              name\n              symbol\n              decimal\n              referrerAmountPerEvent\n              refereeAmountPerEvent\n              eventId\n              createdAt\n              updatedAt\n            }\n          }\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.FindProductByIdDocument,
    "\n  query FindProductsByUserAddress {\n    findProductsByUserAddress {\n      id\n      userAddress\n      name\n      domain\n      webLink\n      twitterLink\n      description\n      network\n      productAuth {\n        productId\n        apiKey\n        createdAt\n        updatedAt\n      }\n      sdkInitialized\n      status\n      order\n      createdAt\n      updatedAt\n      incentivePool {\n        productId\n        poolAddress\n        createdAt\n        updatedAt\n      }\n      events {\n        id\n        name\n        description\n        productId\n        type\n        totalEventNum\n        maxRefereeLimitForReferrer\n        startTimeStamp\n        endTimeStamp\n        validationType\n        incentiveToken {\n          id\n          address\n          name\n          symbol\n          decimal\n          referrerAmountPerEvent\n          refereeAmountPerEvent\n          eventId\n          createdAt\n          updatedAt\n        }\n        eventLogValidation {\n          eventId\n          contractAddress\n          eventAbi\n          topics\n          refereeArgs\n          createdAt\n          updatedAt\n        }\n        referralVerifiedEvents {\n          referral {\n            id\n            userReferrals {\n              id\n              userAddress\n              user {\n                id\n                address\n                role\n                status\n                twitterUserName\n                createdAt\n                updatedAt\n              }\n              referralId\n              userReferralType\n              claimed\n              createdAt\n              updatedAt\n            }\n            productId\n            updated\n            createdAt\n            updatedAt\n          }\n          referralId\n          verifiedEventId\n        }\n        createdAt\n        updatedAt\n      }\n      referrals {\n        id\n        userReferrals {\n          id\n          userAddress\n          user {\n            id\n            address\n            role\n            status\n            twitterUserName\n            createdAt\n            updatedAt\n          }\n          referralId\n          userReferralType\n          claimed\n          createdAt\n          updatedAt\n        }\n        productId\n        updated\n        referralVerifiedEvents {\n          referralId\n          verifiedEventId\n          verifiedEvent {\n            id\n            name\n            description\n            productId\n            type\n            totalEventNum\n            maxRefereeLimitForReferrer\n            startTimeStamp\n            endTimeStamp\n            validationType\n            incentiveToken {\n              id\n              address\n              name\n              symbol\n              decimal\n              referrerAmountPerEvent\n              refereeAmountPerEvent\n              eventId\n              createdAt\n              updatedAt\n            }\n          }\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.FindProductsByUserAddressDocument,
    "\n  query FindTestReferralsByProductId($productId: String!) {\n    findTestReferralsByProductId(productId: $productId) {\n      id\n      productId\n      referrerAddress\n      refereeAddress\n      createdAt\n      updatedAt\n    }\n  }\n": types.FindTestReferralsByProductIdDocument,
    "\n  query FindUser {\n    findUser {\n      id\n      address\n      role\n      status\n      twitterUserName\n      referralCode\n      createdAt\n      updatedAt\n    }\n  }\n": types.FindUserDocument,
    "\n  query FindUserByAddress($input: UserInput!) {\n    findUserByAddress(input: $input) {\n      id\n      address\n      role\n      status\n      twitterUserName\n      referralCode\n      createdAt\n      updatedAt\n    }\n  }\n": types.FindUserByAddressDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AddReferral($input: ReferralInput!) {\n    addReferral(input: $input) {\n      id\n      productId\n      userReferrals {\n        id\n        referralId\n        userAddress\n        user {\n          id\n          address\n          role\n          status\n          twitterUserName\n          createdAt\n          updatedAt\n        }\n        userReferralType\n        claimed\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AddReferral($input: ReferralInput!) {\n    addReferral(input: $input) {\n      id\n      productId\n      userReferrals {\n        id\n        referralId\n        userAddress\n        user {\n          id\n          address\n          role\n          status\n          twitterUserName\n          createdAt\n          updatedAt\n        }\n        userReferralType\n        claimed\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateProduct($input: ProductCreateInput!) {\n    createProduct(input: $input) {\n      id\n      userAddress\n      name\n      domain\n      webLink\n      twitterLink\n      description\n      network\n      sdkInitialized\n      status\n      order\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateProduct($input: ProductCreateInput!) {\n    createProduct(input: $input) {\n      id\n      userAddress\n      name\n      domain\n      webLink\n      twitterLink\n      description\n      network\n      sdkInitialized\n      status\n      order\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateReferralCode($input: CreateReferralCodeInput!) {\n    createReferralCode(input: $input) {\n      id\n      twitterUserName\n      referralCode\n    }\n  }\n"): (typeof documents)["\n  mutation CreateReferralCode($input: CreateReferralCodeInput!) {\n    createReferralCode(input: $input) {\n      id\n      twitterUserName\n      referralCode\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteEvent($id: String!) {\n    deleteEvent(id: $id) {\n      id\n      name\n      description\n      productId\n      type\n      totalEventNum\n      maxRefereeLimitForReferrer\n      startTimeStamp\n      endTimeStamp\n      validationType\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteEvent($id: String!) {\n    deleteEvent(id: $id) {\n      id\n      name\n      description\n      productId\n      type\n      totalEventNum\n      maxRefereeLimitForReferrer\n      startTimeStamp\n      endTimeStamp\n      validationType\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RefreshApiKey($input: ProductUpdateInput!) {\n    refreshApiKey(input: $input) {\n      id\n      productAuth {\n        productId\n        apiKey\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RefreshApiKey($input: ProductUpdateInput!) {\n    refreshApiKey(input: $input) {\n      id\n      productAuth {\n        productId\n        apiKey\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RefreshTokens($input: TokenInput!) {\n    refreshTokens(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n"): (typeof documents)["\n  mutation RefreshTokens($input: TokenInput!) {\n    refreshTokens(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RequestLogin($input: UserInput!) {\n    requestLogin(input: $input) {\n      id\n      address\n      role\n      status\n      nonce\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation RequestLogin($input: UserInput!) {\n    requestLogin(input: $input) {\n      id\n      address\n      role\n      status\n      nonce\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation SetIncentivePool($input: ProductUpdateInput!) {\n    setIncentivePool(input: $input) {\n      id\n      incentivePool {\n        productId\n        poolAddress\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SetIncentivePool($input: ProductUpdateInput!) {\n    setIncentivePool(input: $input) {\n      id\n      incentivePool {\n        productId\n        poolAddress\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation SetProductStatus($input: ProductUpdateInput!) {\n    setProductStatus(input: $input) {\n      id\n      name\n      domain\n      webLink\n      twitterLink\n      description\n      network\n      sdkInitialized\n      status\n      order\n      createdAt\n      updatedAt\n      incentivePool {\n        productId\n        poolAddress\n        createdAt\n        updatedAt\n      }\n      events {\n        id\n        name\n        description\n        productId\n        type\n        totalEventNum\n        maxRefereeLimitForReferrer\n        startTimeStamp\n        endTimeStamp\n        validationType\n        incentiveToken {\n          id\n          address\n          name\n          symbol\n          decimal\n          referrerAmountPerEvent\n          refereeAmountPerEvent\n          eventId\n          createdAt\n          updatedAt\n        }\n        eventLogValidation {\n          eventId\n          contractAddress\n          eventAbi\n          topics\n          refereeArgs\n          createdAt\n          updatedAt\n        }\n        createdAt\n        updatedAt\n      }\n      referrals {\n        id\n        userReferrals {\n          id\n          userAddress\n          user {\n            id\n            address\n            role\n            status\n            twitterUserName\n            createdAt\n            updatedAt\n          }\n          referralId\n          userReferralType\n          claimed\n          createdAt\n          updatedAt\n        }\n        productId\n        updated\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SetProductStatus($input: ProductUpdateInput!) {\n    setProductStatus(input: $input) {\n      id\n      name\n      domain\n      webLink\n      twitterLink\n      description\n      network\n      sdkInitialized\n      status\n      order\n      createdAt\n      updatedAt\n      incentivePool {\n        productId\n        poolAddress\n        createdAt\n        updatedAt\n      }\n      events {\n        id\n        name\n        description\n        productId\n        type\n        totalEventNum\n        maxRefereeLimitForReferrer\n        startTimeStamp\n        endTimeStamp\n        validationType\n        incentiveToken {\n          id\n          address\n          name\n          symbol\n          decimal\n          referrerAmountPerEvent\n          refereeAmountPerEvent\n          eventId\n          createdAt\n          updatedAt\n        }\n        eventLogValidation {\n          eventId\n          contractAddress\n          eventAbi\n          topics\n          refereeArgs\n          createdAt\n          updatedAt\n        }\n        createdAt\n        updatedAt\n      }\n      referrals {\n        id\n        userReferrals {\n          id\n          userAddress\n          user {\n            id\n            address\n            role\n            status\n            twitterUserName\n            createdAt\n            updatedAt\n          }\n          referralId\n          userReferralType\n          claimed\n          createdAt\n          updatedAt\n        }\n        productId\n        updated\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpsertEvent($input: EventInput!) {\n    upsertEvent(input: $input) {\n      id\n      name\n      description\n      productId\n      type\n      totalEventNum\n      maxRefereeLimitForReferrer\n      startTimeStamp\n      endTimeStamp\n      validationType\n      incentiveToken {\n        id\n        address\n        name\n        symbol\n        decimal\n        referrerAmountPerEvent\n        refereeAmountPerEvent\n        eventId\n        createdAt\n        updatedAt\n      }\n      eventLogValidation {\n        eventId\n        contractAddress\n        eventAbi\n        topics\n        refereeArgs\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpsertEvent($input: EventInput!) {\n    upsertEvent(input: $input) {\n      id\n      name\n      description\n      productId\n      type\n      totalEventNum\n      maxRefereeLimitForReferrer\n      startTimeStamp\n      endTimeStamp\n      validationType\n      incentiveToken {\n        id\n        address\n        name\n        symbol\n        decimal\n        referrerAmountPerEvent\n        refereeAmountPerEvent\n        eventId\n        createdAt\n        updatedAt\n      }\n      eventLogValidation {\n        eventId\n        contractAddress\n        eventAbi\n        topics\n        refereeArgs\n        createdAt\n        updatedAt\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation VerifyLogin($input: VerifyUserInput!) {\n    verifyLogin(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n"): (typeof documents)["\n  mutation VerifyLogin($input: VerifyUserInput!) {\n    verifyLogin(input: $input) {\n      accessToken\n      refreshToken\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindAllReferrals {\n    findAllReferrals {\n      id\n      userReferrals {\n        id\n        userAddress\n        user {\n          id\n          address\n          role\n          status\n          twitterUserName\n          createdAt\n          updatedAt\n        }\n        referralId\n        userReferralType\n        claimed\n        createdAt\n        updatedAt\n      }\n      productId\n      updated\n      referralVerifiedEvents {\n        referralId\n        verifiedEventId\n        verifiedEvent {\n          id\n          name\n          description\n          productId\n          type\n          totalEventNum\n          maxRefereeLimitForReferrer\n          startTimeStamp\n          endTimeStamp\n          validationType\n          incentiveToken {\n            id\n            address\n            name\n            symbol\n            decimal\n            referrerAmountPerEvent\n            refereeAmountPerEvent\n            eventId\n            createdAt\n            updatedAt\n          }\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FindAllReferrals {\n    findAllReferrals {\n      id\n      userReferrals {\n        id\n        userAddress\n        user {\n          id\n          address\n          role\n          status\n          twitterUserName\n          createdAt\n          updatedAt\n        }\n        referralId\n        userReferralType\n        claimed\n        createdAt\n        updatedAt\n      }\n      productId\n      updated\n      referralVerifiedEvents {\n        referralId\n        verifiedEventId\n        verifiedEvent {\n          id\n          name\n          description\n          productId\n          type\n          totalEventNum\n          maxRefereeLimitForReferrer\n          startTimeStamp\n          endTimeStamp\n          validationType\n          incentiveToken {\n            id\n            address\n            name\n            symbol\n            decimal\n            referrerAmountPerEvent\n            refereeAmountPerEvent\n            eventId\n            createdAt\n            updatedAt\n          }\n        }\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindEventById($eventId: String!) {\n    findEventById(eventId: $eventId) {\n      id\n      name\n      description\n      productId\n      type\n      totalEventNum\n      maxRefereeLimitForReferrer\n      startTimeStamp\n      endTimeStamp\n      validationType\n      incentiveToken {\n        id\n        address\n        name\n        symbol\n        decimal\n        referrerAmountPerEvent\n        refereeAmountPerEvent\n        eventId\n        createdAt\n        updatedAt\n      }\n      eventLogValidation {\n        eventId\n        contractAddress\n        eventAbi\n        topics\n        refereeArgs\n        createdAt\n        updatedAt\n      }\n      referralVerifiedEvents {\n        referral {\n          id\n          userReferrals {\n            id\n            userAddress\n            user {\n              id\n              address\n              role\n              status\n              twitterUserName\n              createdAt\n              updatedAt\n            }\n            referralId\n            userReferralType\n            claimed\n            createdAt\n            updatedAt\n          }\n          productId\n          updated\n          createdAt\n          updatedAt\n        }\n        referralId\n        verifiedEventId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FindEventById($eventId: String!) {\n    findEventById(eventId: $eventId) {\n      id\n      name\n      description\n      productId\n      type\n      totalEventNum\n      maxRefereeLimitForReferrer\n      startTimeStamp\n      endTimeStamp\n      validationType\n      incentiveToken {\n        id\n        address\n        name\n        symbol\n        decimal\n        referrerAmountPerEvent\n        refereeAmountPerEvent\n        eventId\n        createdAt\n        updatedAt\n      }\n      eventLogValidation {\n        eventId\n        contractAddress\n        eventAbi\n        topics\n        refereeArgs\n        createdAt\n        updatedAt\n      }\n      referralVerifiedEvents {\n        referral {\n          id\n          userReferrals {\n            id\n            userAddress\n            user {\n              id\n              address\n              role\n              status\n              twitterUserName\n              createdAt\n              updatedAt\n            }\n            referralId\n            userReferralType\n            claimed\n            createdAt\n            updatedAt\n          }\n          productId\n          updated\n          createdAt\n          updatedAt\n        }\n        referralId\n        verifiedEventId\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindProductByDomain($domain: String!) {\n    findProductByDomain(domain: $domain) {\n      id\n      userAddress\n      name\n      domain\n      webLink\n      twitterLink\n      description\n      network\n      sdkInitialized\n      status\n      order\n      createdAt\n      updatedAt\n      incentivePool {\n        productId\n        poolAddress\n        createdAt\n        updatedAt\n      }\n      events {\n        id\n        name\n        description\n        productId\n        type\n        totalEventNum\n        maxRefereeLimitForReferrer\n        startTimeStamp\n        endTimeStamp\n        validationType\n        incentiveToken {\n          id\n          address\n          name\n          symbol\n          decimal\n          referrerAmountPerEvent\n          refereeAmountPerEvent\n          eventId\n          createdAt\n          updatedAt\n        }\n        eventLogValidation {\n          eventId\n          contractAddress\n          eventAbi\n          topics\n          refereeArgs\n          createdAt\n          updatedAt\n        }\n        referralVerifiedEvents {\n          referral {\n            id\n            userReferrals {\n              id\n              userAddress\n              user {\n                id\n                address\n                role\n                status\n                twitterUserName\n                createdAt\n                updatedAt\n              }\n              referralId\n              userReferralType\n              claimed\n              createdAt\n              updatedAt\n            }\n            productId\n            updated\n            createdAt\n            updatedAt\n          }\n          referralId\n          verifiedEventId\n        }\n        createdAt\n        updatedAt\n      }\n      referrals {\n        id\n        userReferrals {\n          id\n          userAddress\n          user {\n            id\n            address\n            role\n            status\n            twitterUserName\n            createdAt\n            updatedAt\n          }\n          referralId\n          userReferralType\n          claimed\n          createdAt\n          updatedAt\n        }\n        productId\n        updated\n        referralVerifiedEvents {\n          referralId\n          verifiedEventId\n          verifiedEvent {\n            id\n            name\n            description\n            productId\n            type\n            totalEventNum\n            maxRefereeLimitForReferrer\n            startTimeStamp\n            endTimeStamp\n            validationType\n            incentiveToken {\n              id\n              address\n              name\n              symbol\n              decimal\n              referrerAmountPerEvent\n              refereeAmountPerEvent\n              eventId\n              createdAt\n              updatedAt\n            }\n          }\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FindProductByDomain($domain: String!) {\n    findProductByDomain(domain: $domain) {\n      id\n      userAddress\n      name\n      domain\n      webLink\n      twitterLink\n      description\n      network\n      sdkInitialized\n      status\n      order\n      createdAt\n      updatedAt\n      incentivePool {\n        productId\n        poolAddress\n        createdAt\n        updatedAt\n      }\n      events {\n        id\n        name\n        description\n        productId\n        type\n        totalEventNum\n        maxRefereeLimitForReferrer\n        startTimeStamp\n        endTimeStamp\n        validationType\n        incentiveToken {\n          id\n          address\n          name\n          symbol\n          decimal\n          referrerAmountPerEvent\n          refereeAmountPerEvent\n          eventId\n          createdAt\n          updatedAt\n        }\n        eventLogValidation {\n          eventId\n          contractAddress\n          eventAbi\n          topics\n          refereeArgs\n          createdAt\n          updatedAt\n        }\n        referralVerifiedEvents {\n          referral {\n            id\n            userReferrals {\n              id\n              userAddress\n              user {\n                id\n                address\n                role\n                status\n                twitterUserName\n                createdAt\n                updatedAt\n              }\n              referralId\n              userReferralType\n              claimed\n              createdAt\n              updatedAt\n            }\n            productId\n            updated\n            createdAt\n            updatedAt\n          }\n          referralId\n          verifiedEventId\n        }\n        createdAt\n        updatedAt\n      }\n      referrals {\n        id\n        userReferrals {\n          id\n          userAddress\n          user {\n            id\n            address\n            role\n            status\n            twitterUserName\n            createdAt\n            updatedAt\n          }\n          referralId\n          userReferralType\n          claimed\n          createdAt\n          updatedAt\n        }\n        productId\n        updated\n        referralVerifiedEvents {\n          referralId\n          verifiedEventId\n          verifiedEvent {\n            id\n            name\n            description\n            productId\n            type\n            totalEventNum\n            maxRefereeLimitForReferrer\n            startTimeStamp\n            endTimeStamp\n            validationType\n            incentiveToken {\n              id\n              address\n              name\n              symbol\n              decimal\n              referrerAmountPerEvent\n              refereeAmountPerEvent\n              eventId\n              createdAt\n              updatedAt\n            }\n          }\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindProductById($id: String!) {\n    findProductById(id: $id) {\n      id\n      userAddress\n      name\n      domain\n      webLink\n      twitterLink\n      description\n      network\n      sdkInitialized\n      status\n      order\n      createdAt\n      updatedAt\n      incentivePool {\n        productId\n        poolAddress\n        createdAt\n        updatedAt\n      }\n      events {\n        id\n        name\n        description\n        productId\n        type\n        totalEventNum\n        maxRefereeLimitForReferrer\n        startTimeStamp\n        endTimeStamp\n        validationType\n        incentiveToken {\n          id\n          address\n          name\n          symbol\n          decimal\n          referrerAmountPerEvent\n          refereeAmountPerEvent\n          eventId\n          createdAt\n          updatedAt\n        }\n        eventLogValidation {\n          eventId\n          contractAddress\n          eventAbi\n          topics\n          refereeArgs\n          createdAt\n          updatedAt\n        }\n        referralVerifiedEvents {\n          referral {\n            id\n            userReferrals {\n              id\n              userAddress\n              user {\n                id\n                address\n                role\n                status\n                twitterUserName\n                createdAt\n                updatedAt\n              }\n              referralId\n              userReferralType\n              claimed\n              createdAt\n              updatedAt\n            }\n            productId\n            updated\n            createdAt\n            updatedAt\n          }\n          referralId\n          verifiedEventId\n        }\n        createdAt\n        updatedAt\n      }\n      referrals {\n        id\n        userReferrals {\n          id\n          userAddress\n          user {\n            id\n            address\n            role\n            status\n            twitterUserName\n            createdAt\n            updatedAt\n          }\n          referralId\n          userReferralType\n          claimed\n          createdAt\n          updatedAt\n        }\n        productId\n        updated\n        referralVerifiedEvents {\n          referralId\n          verifiedEventId\n          verifiedEvent {\n            id\n            name\n            description\n            productId\n            type\n            totalEventNum\n            maxRefereeLimitForReferrer\n            startTimeStamp\n            endTimeStamp\n            validationType\n            incentiveToken {\n              id\n              address\n              name\n              symbol\n              decimal\n              referrerAmountPerEvent\n              refereeAmountPerEvent\n              eventId\n              createdAt\n              updatedAt\n            }\n          }\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FindProductById($id: String!) {\n    findProductById(id: $id) {\n      id\n      userAddress\n      name\n      domain\n      webLink\n      twitterLink\n      description\n      network\n      sdkInitialized\n      status\n      order\n      createdAt\n      updatedAt\n      incentivePool {\n        productId\n        poolAddress\n        createdAt\n        updatedAt\n      }\n      events {\n        id\n        name\n        description\n        productId\n        type\n        totalEventNum\n        maxRefereeLimitForReferrer\n        startTimeStamp\n        endTimeStamp\n        validationType\n        incentiveToken {\n          id\n          address\n          name\n          symbol\n          decimal\n          referrerAmountPerEvent\n          refereeAmountPerEvent\n          eventId\n          createdAt\n          updatedAt\n        }\n        eventLogValidation {\n          eventId\n          contractAddress\n          eventAbi\n          topics\n          refereeArgs\n          createdAt\n          updatedAt\n        }\n        referralVerifiedEvents {\n          referral {\n            id\n            userReferrals {\n              id\n              userAddress\n              user {\n                id\n                address\n                role\n                status\n                twitterUserName\n                createdAt\n                updatedAt\n              }\n              referralId\n              userReferralType\n              claimed\n              createdAt\n              updatedAt\n            }\n            productId\n            updated\n            createdAt\n            updatedAt\n          }\n          referralId\n          verifiedEventId\n        }\n        createdAt\n        updatedAt\n      }\n      referrals {\n        id\n        userReferrals {\n          id\n          userAddress\n          user {\n            id\n            address\n            role\n            status\n            twitterUserName\n            createdAt\n            updatedAt\n          }\n          referralId\n          userReferralType\n          claimed\n          createdAt\n          updatedAt\n        }\n        productId\n        updated\n        referralVerifiedEvents {\n          referralId\n          verifiedEventId\n          verifiedEvent {\n            id\n            name\n            description\n            productId\n            type\n            totalEventNum\n            maxRefereeLimitForReferrer\n            startTimeStamp\n            endTimeStamp\n            validationType\n            incentiveToken {\n              id\n              address\n              name\n              symbol\n              decimal\n              referrerAmountPerEvent\n              refereeAmountPerEvent\n              eventId\n              createdAt\n              updatedAt\n            }\n          }\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindProductsByUserAddress {\n    findProductsByUserAddress {\n      id\n      userAddress\n      name\n      domain\n      webLink\n      twitterLink\n      description\n      network\n      productAuth {\n        productId\n        apiKey\n        createdAt\n        updatedAt\n      }\n      sdkInitialized\n      status\n      order\n      createdAt\n      updatedAt\n      incentivePool {\n        productId\n        poolAddress\n        createdAt\n        updatedAt\n      }\n      events {\n        id\n        name\n        description\n        productId\n        type\n        totalEventNum\n        maxRefereeLimitForReferrer\n        startTimeStamp\n        endTimeStamp\n        validationType\n        incentiveToken {\n          id\n          address\n          name\n          symbol\n          decimal\n          referrerAmountPerEvent\n          refereeAmountPerEvent\n          eventId\n          createdAt\n          updatedAt\n        }\n        eventLogValidation {\n          eventId\n          contractAddress\n          eventAbi\n          topics\n          refereeArgs\n          createdAt\n          updatedAt\n        }\n        referralVerifiedEvents {\n          referral {\n            id\n            userReferrals {\n              id\n              userAddress\n              user {\n                id\n                address\n                role\n                status\n                twitterUserName\n                createdAt\n                updatedAt\n              }\n              referralId\n              userReferralType\n              claimed\n              createdAt\n              updatedAt\n            }\n            productId\n            updated\n            createdAt\n            updatedAt\n          }\n          referralId\n          verifiedEventId\n        }\n        createdAt\n        updatedAt\n      }\n      referrals {\n        id\n        userReferrals {\n          id\n          userAddress\n          user {\n            id\n            address\n            role\n            status\n            twitterUserName\n            createdAt\n            updatedAt\n          }\n          referralId\n          userReferralType\n          claimed\n          createdAt\n          updatedAt\n        }\n        productId\n        updated\n        referralVerifiedEvents {\n          referralId\n          verifiedEventId\n          verifiedEvent {\n            id\n            name\n            description\n            productId\n            type\n            totalEventNum\n            maxRefereeLimitForReferrer\n            startTimeStamp\n            endTimeStamp\n            validationType\n            incentiveToken {\n              id\n              address\n              name\n              symbol\n              decimal\n              referrerAmountPerEvent\n              refereeAmountPerEvent\n              eventId\n              createdAt\n              updatedAt\n            }\n          }\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FindProductsByUserAddress {\n    findProductsByUserAddress {\n      id\n      userAddress\n      name\n      domain\n      webLink\n      twitterLink\n      description\n      network\n      productAuth {\n        productId\n        apiKey\n        createdAt\n        updatedAt\n      }\n      sdkInitialized\n      status\n      order\n      createdAt\n      updatedAt\n      incentivePool {\n        productId\n        poolAddress\n        createdAt\n        updatedAt\n      }\n      events {\n        id\n        name\n        description\n        productId\n        type\n        totalEventNum\n        maxRefereeLimitForReferrer\n        startTimeStamp\n        endTimeStamp\n        validationType\n        incentiveToken {\n          id\n          address\n          name\n          symbol\n          decimal\n          referrerAmountPerEvent\n          refereeAmountPerEvent\n          eventId\n          createdAt\n          updatedAt\n        }\n        eventLogValidation {\n          eventId\n          contractAddress\n          eventAbi\n          topics\n          refereeArgs\n          createdAt\n          updatedAt\n        }\n        referralVerifiedEvents {\n          referral {\n            id\n            userReferrals {\n              id\n              userAddress\n              user {\n                id\n                address\n                role\n                status\n                twitterUserName\n                createdAt\n                updatedAt\n              }\n              referralId\n              userReferralType\n              claimed\n              createdAt\n              updatedAt\n            }\n            productId\n            updated\n            createdAt\n            updatedAt\n          }\n          referralId\n          verifiedEventId\n        }\n        createdAt\n        updatedAt\n      }\n      referrals {\n        id\n        userReferrals {\n          id\n          userAddress\n          user {\n            id\n            address\n            role\n            status\n            twitterUserName\n            createdAt\n            updatedAt\n          }\n          referralId\n          userReferralType\n          claimed\n          createdAt\n          updatedAt\n        }\n        productId\n        updated\n        referralVerifiedEvents {\n          referralId\n          verifiedEventId\n          verifiedEvent {\n            id\n            name\n            description\n            productId\n            type\n            totalEventNum\n            maxRefereeLimitForReferrer\n            startTimeStamp\n            endTimeStamp\n            validationType\n            incentiveToken {\n              id\n              address\n              name\n              symbol\n              decimal\n              referrerAmountPerEvent\n              refereeAmountPerEvent\n              eventId\n              createdAt\n              updatedAt\n            }\n          }\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindTestReferralsByProductId($productId: String!) {\n    findTestReferralsByProductId(productId: $productId) {\n      id\n      productId\n      referrerAddress\n      refereeAddress\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FindTestReferralsByProductId($productId: String!) {\n    findTestReferralsByProductId(productId: $productId) {\n      id\n      productId\n      referrerAddress\n      refereeAddress\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindUser {\n    findUser {\n      id\n      address\n      role\n      status\n      twitterUserName\n      referralCode\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FindUser {\n    findUser {\n      id\n      address\n      role\n      status\n      twitterUserName\n      referralCode\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FindUserByAddress($input: UserInput!) {\n    findUserByAddress(input: $input) {\n      id\n      address\n      role\n      status\n      twitterUserName\n      referralCode\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FindUserByAddress($input: UserInput!) {\n    findUserByAddress(input: $input) {\n      id\n      address\n      role\n      status\n      twitterUserName\n      referralCode\n      createdAt\n      updatedAt\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;